"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatusBarStyle = exports.getStatusBarColor = exports.setStatusBarStyles = exports.setStatusBarColors = exports.withStatusBar = void 0;
const assert_1 = __importDefault(require("assert"));
const android_plugins_1 = require("../plugins/android-plugins");
const Colors_1 = require("./Colors");
const Styles_1 = require("./Styles");
const COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';
const WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';
const WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';
const withStatusBar = config => {
    config = withStatusBarColors(config);
    config = withStatusBarStyles(config);
    return config;
};
exports.withStatusBar = withStatusBar;
const withStatusBarColors = config => {
    return android_plugins_1.withAndroidColors(config, config => {
        config.modResults = setStatusBarColors(config, config.modResults);
        return config;
    });
};
const withStatusBarStyles = config => {
    return android_plugins_1.withAndroidStyles(config, config => {
        config.modResults = setStatusBarStyles(config, config.modResults);
        return config;
    });
};
function setStatusBarColors(config, colors) {
    return Colors_1.assignColorValue(colors, {
        name: COLOR_PRIMARY_DARK_KEY,
        value: getStatusBarColor(config),
    });
}
exports.setStatusBarColors = setStatusBarColors;
function setStatusBarStyles(config, styles) {
    const hexString = getStatusBarColor(config);
    styles = Styles_1.assignStylesValue(styles, {
        parent: Styles_1.getAppThemeLightNoActionBarGroup(),
        name: WINDOW_LIGHT_STATUS_BAR,
        value: 'true',
        // Default is light-content, don't need to do anything to set it
        add: getStatusBarStyle(config) === 'dark-content',
    });
    styles = Styles_1.assignStylesValue(styles, {
        parent: Styles_1.getAppThemeLightNoActionBarGroup(),
        name: WINDOW_TRANSLUCENT_STATUS,
        value: 'true',
        // translucent status bar set in theme
        add: !hexString,
    });
    styles = Styles_1.assignStylesValue(styles, {
        parent: Styles_1.getAppThemeLightNoActionBarGroup(),
        name: COLOR_PRIMARY_DARK_KEY,
        value: `@color/${COLOR_PRIMARY_DARK_KEY}`,
        // Remove the color if translucent is used
        add: !!hexString,
    });
    return styles;
}
exports.setStatusBarStyles = setStatusBarStyles;
function getStatusBarColor(config) {
    var _a;
    const backgroundColor = (_a = config.androidStatusBar) === null || _a === void 0 ? void 0 : _a.backgroundColor;
    if (backgroundColor) {
        // Drop support for translucent
        assert_1.default(backgroundColor !== 'translucent', `androidStatusBar.backgroundColor must be a valid hex string, instead got: "${backgroundColor}"`);
    }
    return backgroundColor;
}
exports.getStatusBarColor = getStatusBarColor;
function getStatusBarStyle(config) {
    var _a;
    return ((_a = config.androidStatusBar) === null || _a === void 0 ? void 0 : _a.barStyle) || 'light-content';
}
exports.getStatusBarStyle = getStatusBarStyle;
//# sourceMappingURL=StatusBar.js.map