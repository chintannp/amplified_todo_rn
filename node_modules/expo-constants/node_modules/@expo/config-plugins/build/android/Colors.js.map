{"version":3,"file":"Colors.js","sourceRoot":"","sources":["../../src/android/Colors.ts"],"names":[],"mappings":";;;AAAA,mCAAkD;AAClD,2CAOqB;AAErB,SAAgB,4BAA4B,CAC1C,WAAmB,EACnB,EAAE,IAAI,KAA8B,EAAE;IAEtC,OAAO,+BAAuB,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AACxE,CAAC;AALD,oEAKC;AAED,SAAgB,YAAY,CAAC,SAA0B,EAAE,qBAAkC;;IACzF,IAAI,MAAA,qBAAqB,CAAC,SAAS,0CAAE,KAAK,EAAE;QAC1C,MAAM,eAAe,GAAG,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAClE,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CACtD,CAAC,CAAC,CAAC,CAAC;QACL,IAAI,eAAe,EAAE;YACnB,eAAe,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;SACjC;aAAM;YACL,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACvD;KACF;SAAM;QACL,IAAI,CAAC,qBAAqB,CAAC,SAAS,IAAI,OAAO,qBAAqB,CAAC,SAAS,KAAK,QAAQ,EAAE;YAC3F,+CAA+C;YAC/C,qBAAqB,CAAC,SAAS,GAAG,EAAE,CAAC;SACtC;QACD,qBAAqB,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;KACrD;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AAlBD,oCAkBC;AAED,SAAgB,eAAe,CAAC,KAAa,EAAE,QAAqB;;IAClE,IAAI,MAAA,QAAQ,CAAC,SAAS,0CAAE,KAAK,EAAE;QAC7B,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;QAC7F,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACd,6BAA6B;YAC7B,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC3C;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AATD,0CASC;AAED;;GAEG;AACH,SAAgB,gBAAgB,CAC9B,GAAgB,EAChB,EACE,KAAK,EACL,IAAI,GAIL;IAED,IAAI,KAAK,EAAE;QACT,OAAO,YAAY,CACjB,6BAAiB,CAAC;YAChB,IAAI;YACJ,KAAK;SACN,CAAC,EACF,GAAG,CACJ,CAAC;KACH;IAED,OAAO,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC;AArBD,4CAqBC;AAED;;;;;;;GAOG;AACH,SAAgB,iBAAiB,CAAC,GAAgB;;IAChD,IAAI,CAAC,CAAA,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,SAAS,0CAAE,KAAK,CAAA,EAAE;QAC1B,OAAO,IAAI,CAAC;KACb;IAED,OAAO,oCAAwB,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACvD,CAAC;AAND,8CAMC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAAC,GAA2B;IAC9D,OAAO;QACL,SAAS,EAAE;YACT,KAAK,EAAE,oCAAwB,CAAC,GAAG,CAAC;SACrC;KACF,CAAC;AACJ,CAAC;AAND,oDAMC","sourcesContent":["import { getResourceXMLPathAsync } from './Paths';\nimport {\n  buildResourceItem,\n  getObjectAsResourceItems,\n  getResourceItemsAsObject,\n  ResourceItemXML,\n  ResourceKind,\n  ResourceXML,\n} from './Resources';\n\nexport function getProjectColorsXMLPathAsync(\n  projectRoot: string,\n  { kind }: { kind?: ResourceKind } = {}\n) {\n  return getResourceXMLPathAsync(projectRoot, { kind, name: 'colors' });\n}\n\nexport function setColorItem(itemToAdd: ResourceItemXML, colorFileContentsJSON: ResourceXML) {\n  if (colorFileContentsJSON.resources?.color) {\n    const colorNameExists = colorFileContentsJSON.resources.color.filter(\n      (e: ResourceItemXML) => e.$.name === itemToAdd.$.name\n    )[0];\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      //file was empty and JSON is `{resources : ''}`\n      colorFileContentsJSON.resources = {};\n    }\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n  return colorFileContentsJSON;\n}\n\nexport function removeColorItem(named: string, contents: ResourceXML) {\n  if (contents.resources?.color) {\n    const index = contents.resources.color.findIndex((e: ResourceItemXML) => e.$.name === named);\n    if (index > -1) {\n      // replace the previous value\n      contents.resources.color.splice(index, 1);\n    }\n  }\n  return contents;\n}\n\n/**\n * Set or remove value in XML based on nullish factor of the `value` property.\n */\nexport function assignColorValue(\n  xml: ResourceXML,\n  {\n    value,\n    name,\n  }: {\n    value?: string | null;\n    name: string;\n  }\n) {\n  if (value) {\n    return setColorItem(\n      buildResourceItem({\n        name,\n        value,\n      }),\n      xml\n    );\n  }\n\n  return removeColorItem(name, xml);\n}\n\n/**\n * Helper to convert a basic XML object into a simple k/v pair.\n * `colors.xml` is a very basic XML file so this is pretty safe to do.\n * Added for testing purposes.\n *\n * @param xml\n * @returns\n */\nexport function getColorsAsObject(xml: ResourceXML): Record<string, string> | null {\n  if (!xml?.resources?.color) {\n    return null;\n  }\n\n  return getResourceItemsAsObject(xml.resources.color);\n}\n\n/**\n * Helper to convert a basic k/v object to a colors XML object.\n *\n * @param xml\n * @returns\n */\nexport function getObjectAsColorsXml(obj: Record<string, string>): ResourceXML {\n  return {\n    resources: {\n      color: getObjectAsResourceItems(obj),\n    },\n  };\n}\n"]}