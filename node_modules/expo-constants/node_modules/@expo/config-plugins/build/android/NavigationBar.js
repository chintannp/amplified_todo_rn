"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNavigationBarStyle = exports.getNavigationBarColor = exports.getNavigationBarImmersiveMode = exports.setNavigationBarStyles = exports.setNavigationBarColors = exports.withNavigationBar = void 0;
const android_plugins_1 = require("../plugins/android-plugins");
const WarningAggregator = __importStar(require("../utils/warnings"));
const Colors_1 = require("./Colors");
const Resources_1 = require("./Resources");
const Styles_1 = require("./Styles");
const NAVIGATION_BAR_COLOR = 'navigationBarColor';
const withNavigationBar = config => {
    const immersiveMode = getNavigationBarImmersiveMode(config);
    if (immersiveMode) {
        // Immersive mode needs to be set programmatically
        // TODO: Resolve
        WarningAggregator.addWarningAndroid('androidNavigationBar.visible', 'Hiding the navigation bar must be done programmatically. Refer to the Android documentation - https://developer.android.com/training/system-ui/immersive - for instructions.');
    }
    config = withNavigationBarColors(config);
    config = withNavigationBarStyles(config);
    return config;
};
exports.withNavigationBar = withNavigationBar;
const withNavigationBarColors = config => {
    return android_plugins_1.withAndroidColors(config, config => {
        config.modResults = setNavigationBarColors(config, config.modResults);
        return config;
    });
};
const withNavigationBarStyles = config => {
    return android_plugins_1.withAndroidStyles(config, config => {
        config.modResults = setNavigationBarStyles(config, config.modResults);
        return config;
    });
};
function setNavigationBarColors(config, colors) {
    const hexString = getNavigationBarColor(config);
    if (hexString) {
        colors = Colors_1.setColorItem(Resources_1.buildResourceItem({
            name: NAVIGATION_BAR_COLOR,
            value: hexString,
        }), colors);
    }
    return colors;
}
exports.setNavigationBarColors = setNavigationBarColors;
function setNavigationBarStyles(config, styles) {
    styles = Styles_1.assignStylesValue(styles, {
        add: !!getNavigationBarColor(config),
        parent: Styles_1.getAppThemeLightNoActionBarGroup(),
        name: `android:${NAVIGATION_BAR_COLOR}`,
        value: `@color/${NAVIGATION_BAR_COLOR}`,
    });
    styles = Styles_1.assignStylesValue(styles, {
        add: getNavigationBarStyle(config) === 'dark-content',
        parent: Styles_1.getAppThemeLightNoActionBarGroup(),
        name: 'android:windowLightNavigationBar',
        value: 'true',
    });
    return styles;
}
exports.setNavigationBarStyles = setNavigationBarStyles;
function getNavigationBarImmersiveMode(config) {
    var _a;
    return ((_a = config.androidNavigationBar) === null || _a === void 0 ? void 0 : _a.visible) || null;
}
exports.getNavigationBarImmersiveMode = getNavigationBarImmersiveMode;
function getNavigationBarColor(config) {
    var _a;
    return ((_a = config.androidNavigationBar) === null || _a === void 0 ? void 0 : _a.backgroundColor) || null;
}
exports.getNavigationBarColor = getNavigationBarColor;
function getNavigationBarStyle(config) {
    var _a;
    return ((_a = config.androidNavigationBar) === null || _a === void 0 ? void 0 : _a.barStyle) || 'light-content';
}
exports.getNavigationBarStyle = getNavigationBarStyle;
//# sourceMappingURL=NavigationBar.js.map