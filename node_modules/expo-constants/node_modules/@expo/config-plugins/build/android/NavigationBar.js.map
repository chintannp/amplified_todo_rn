{"version":3,"file":"NavigationBar.js","sourceRoot":"","sources":["../../src/android/NavigationBar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA,gEAAkF;AAClF,qEAAuD;AACvD,qCAAwC;AACxC,2CAA6D;AAC7D,qCAA+E;AAE/E,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAE3C,MAAM,iBAAiB,GAAiB,MAAM,CAAC,EAAE;IACtD,MAAM,aAAa,GAAG,6BAA6B,CAAC,MAAM,CAAC,CAAC;IAC5D,IAAI,aAAa,EAAE;QACjB,kDAAkD;QAClD,gBAAgB;QAChB,iBAAiB,CAAC,iBAAiB,CACjC,8BAA8B,EAC9B,8KAA8K,CAC/K,CAAC;KACH;IAED,MAAM,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACzC,MAAM,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAdW,QAAA,iBAAiB,qBAc5B;AAEF,MAAM,uBAAuB,GAAiB,MAAM,CAAC,EAAE;IACrD,OAAO,mCAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACxC,MAAM,CAAC,UAAU,GAAG,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAiB,MAAM,CAAC,EAAE;IACrD,OAAO,mCAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACxC,MAAM,CAAC,UAAU,GAAG,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,SAAgB,sBAAsB,CACpC,MAAgD,EAChD,MAAmB;IAEnB,MAAM,SAAS,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;IAChD,IAAI,SAAS,EAAE;QACb,MAAM,GAAG,qBAAY,CACnB,6BAAiB,CAAC;YAChB,IAAI,EAAE,oBAAoB;YAC1B,KAAK,EAAE,SAAS;SACjB,CAAC,EACF,MAAM,CACP,CAAC;KACH;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAfD,wDAeC;AAED,SAAgB,sBAAsB,CACpC,MAAgD,EAChD,MAAmB;IAEnB,MAAM,GAAG,0BAAiB,CAAC,MAAM,EAAE;QACjC,GAAG,EAAE,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC;QACpC,MAAM,EAAE,yCAAgC,EAAE;QAC1C,IAAI,EAAE,WAAW,oBAAoB,EAAE;QACvC,KAAK,EAAE,UAAU,oBAAoB,EAAE;KACxC,CAAC,CAAC;IAEH,MAAM,GAAG,0BAAiB,CAAC,MAAM,EAAE;QACjC,GAAG,EAAE,qBAAqB,CAAC,MAAM,CAAC,KAAK,cAAc;QACrD,MAAM,EAAE,yCAAgC,EAAE;QAC1C,IAAI,EAAE,kCAAkC;QACxC,KAAK,EAAE,MAAM;KACd,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAnBD,wDAmBC;AAED,SAAgB,6BAA6B,CAAC,MAAgD;;IAC5F,OAAO,CAAA,MAAA,MAAM,CAAC,oBAAoB,0CAAE,OAAO,KAAI,IAAI,CAAC;AACtD,CAAC;AAFD,sEAEC;AAED,SAAgB,qBAAqB,CAAC,MAAgD;;IACpF,OAAO,CAAA,MAAA,MAAM,CAAC,oBAAoB,0CAAE,eAAe,KAAI,IAAI,CAAC;AAC9D,CAAC;AAFD,sDAEC;AAED,SAAgB,qBAAqB,CAAC,MAAgD;;IACpF,OAAO,CAAA,MAAA,MAAM,CAAC,oBAAoB,0CAAE,QAAQ,KAAI,eAAe,CAAC;AAClE,CAAC;AAFD,sDAEC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { setColorItem } from './Colors';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\nconst NAVIGATION_BAR_COLOR = 'navigationBarColor';\n\nexport const withNavigationBar: ConfigPlugin = config => {\n  const immersiveMode = getNavigationBarImmersiveMode(config);\n  if (immersiveMode) {\n    // Immersive mode needs to be set programmatically\n    // TODO: Resolve\n    WarningAggregator.addWarningAndroid(\n      'androidNavigationBar.visible',\n      'Hiding the navigation bar must be done programmatically. Refer to the Android documentation - https://developer.android.com/training/system-ui/immersive - for instructions.'\n    );\n  }\n\n  config = withNavigationBarColors(config);\n  config = withNavigationBarStyles(config);\n  return config;\n};\n\nconst withNavigationBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setNavigationBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withNavigationBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setNavigationBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setNavigationBarColors(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  const hexString = getNavigationBarColor(config);\n  if (hexString) {\n    colors = setColorItem(\n      buildResourceItem({\n        name: NAVIGATION_BAR_COLOR,\n        value: hexString,\n      }),\n      colors\n    );\n  }\n  return colors;\n}\n\nexport function setNavigationBarStyles(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  styles = assignStylesValue(styles, {\n    add: !!getNavigationBarColor(config),\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: `android:${NAVIGATION_BAR_COLOR}`,\n    value: `@color/${NAVIGATION_BAR_COLOR}`,\n  });\n\n  styles = assignStylesValue(styles, {\n    add: getNavigationBarStyle(config) === 'dark-content',\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: 'android:windowLightNavigationBar',\n    value: 'true',\n  });\n\n  return styles;\n}\n\nexport function getNavigationBarImmersiveMode(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.visible || null;\n}\n\nexport function getNavigationBarColor(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.backgroundColor || null;\n}\n\nexport function getNavigationBarStyle(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.barStyle || 'light-content';\n}\n"]}