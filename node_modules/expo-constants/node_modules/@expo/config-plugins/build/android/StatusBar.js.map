{"version":3,"file":"StatusBar.js","sourceRoot":"","sources":["../../src/android/StatusBar.ts"],"names":[],"mappings":";;;;;;AACA,oDAA4B;AAG5B,gEAAkF;AAClF,qCAA4C;AAE5C,qCAA+E;AAE/E,MAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAClD,MAAM,yBAAyB,GAAG,iCAAiC,CAAC;AACpE,MAAM,uBAAuB,GAAG,8BAA8B,CAAC;AAExD,MAAM,aAAa,GAAiB,MAAM,CAAC,EAAE;IAClD,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACrC,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACrC,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAJW,QAAA,aAAa,iBAIxB;AAEF,MAAM,mBAAmB,GAAiB,MAAM,CAAC,EAAE;IACjD,OAAO,mCAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACxC,MAAM,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QAClE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAiB,MAAM,CAAC,EAAE;IACjD,OAAO,mCAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACxC,MAAM,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QAClE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,SAAgB,kBAAkB,CAChC,MAA4C,EAC5C,MAAmB;IAEnB,OAAO,yBAAgB,CAAC,MAAM,EAAE;QAC9B,IAAI,EAAE,sBAAsB;QAC5B,KAAK,EAAE,iBAAiB,CAAC,MAAM,CAAC;KACjC,CAAC,CAAC;AACL,CAAC;AARD,gDAQC;AAED,SAAgB,kBAAkB,CAChC,MAA4C,EAC5C,MAAmB;IAEnB,MAAM,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,GAAG,0BAAiB,CAAC,MAAM,EAAE;QACjC,MAAM,EAAE,yCAAgC,EAAE;QAC1C,IAAI,EAAE,uBAAuB;QAC7B,KAAK,EAAE,MAAM;QACb,gEAAgE;QAChE,GAAG,EAAE,iBAAiB,CAAC,MAAM,CAAC,KAAK,cAAc;KAClD,CAAC,CAAC;IAEH,MAAM,GAAG,0BAAiB,CAAC,MAAM,EAAE;QACjC,MAAM,EAAE,yCAAgC,EAAE;QAC1C,IAAI,EAAE,yBAAyB;QAC/B,KAAK,EAAE,MAAM;QACb,sCAAsC;QACtC,GAAG,EAAE,CAAC,SAAS;KAChB,CAAC,CAAC;IAEH,MAAM,GAAG,0BAAiB,CAAC,MAAM,EAAE;QACjC,MAAM,EAAE,yCAAgC,EAAE;QAC1C,IAAI,EAAE,sBAAsB;QAC5B,KAAK,EAAE,UAAU,sBAAsB,EAAE;QACzC,0CAA0C;QAC1C,GAAG,EAAE,CAAC,CAAC,SAAS;KACjB,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AA/BD,gDA+BC;AAED,SAAgB,iBAAiB,CAAC,MAA4C;;IAC5E,MAAM,eAAe,GAAG,MAAA,MAAM,CAAC,gBAAgB,0CAAE,eAAe,CAAC;IACjE,IAAI,eAAe,EAAE;QACnB,+BAA+B;QAC/B,gBAAM,CACJ,eAAe,KAAK,aAAa,EACjC,8EAA8E,eAAe,GAAG,CACjG,CAAC;KACH;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAVD,8CAUC;AAED,SAAgB,iBAAiB,CAAC,MAA4C;;IAC5E,OAAO,CAAA,MAAA,MAAM,CAAC,gBAAgB,0CAAE,QAAQ,KAAI,eAAe,CAAC;AAC9D,CAAC;AAFD,8CAEC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport { assignColorValue } from './Colors';\nimport { ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport const withStatusBar: ConfigPlugin = config => {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\n\nconst withStatusBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withStatusBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setStatusBarColors(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  return assignColorValue(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config),\n  });\n}\n\nexport function setStatusBarStyles(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  const hexString = getStatusBarColor(config);\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    value: 'true',\n    // Default is light-content, don't need to do anything to set it\n    add: getStatusBarStyle(config) === 'dark-content',\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    // translucent status bar set in theme\n    add: !hexString,\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    // Remove the color if translucent is used\n    add: !!hexString,\n  });\n\n  return styles;\n}\n\nexport function getStatusBarColor(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  const backgroundColor = config.androidStatusBar?.backgroundColor;\n  if (backgroundColor) {\n    // Drop support for translucent\n    assert(\n      backgroundColor !== 'translucent',\n      `androidStatusBar.backgroundColor must be a valid hex string, instead got: \"${backgroundColor}\"`\n    );\n  }\n  return backgroundColor;\n}\n\nexport function getStatusBarStyle(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n"]}